<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

    <select id="selectMemberListExceptMe" parameterType="java.lang.String" resultType="Member">
        SELECT *
        FROM member
        WHERE id != #{id}
          AND id NOT IN (
                        SELECT applicantNo
                          FROM friend_apply
                         WHERE acceptorNo = #{id}
            )
          AND id NOT IN (
                        SELECT acceptorNo
                          FROM friend_apply
                         WHERE applicantNo = #{id}
            )
    </select>

    <select id="isExistMember" parameterType="java.lang.String" resultType="Member">
        SELECT id
                , email
                , pw
                , nick
                , real_name
                , login_type
                , picture_url
                , thumbnail_image_url
                , locale
                , gender
                , age
                , birth
                , sub_id
          FROM member
         WHERE id = #{id}
    </select>

    <select id="selectOneMemberByEmail" parameterType="java.lang.String" resultType="Member">
        SELECT id
                , email
                , pw
                , nick
                , real_name
                , login_type
                , picture_url
                , thumbnail_image_url
                , locale
                , gender
                , age
                , birth
                , sub_id
          FROM member
         WHERE email = #{email}
    </select>

    <select id="selectApplicantMemberListForMe" parameterType="java.lang.String" resultType="Member">
        SELECT id
                , email
                , pw
                , nick
                , real_name
                , login_type
                , picture_url
                , thumbnail_image_url
                , locale
                , gender
                , age
                , birth
                , sub_id
          FROM member
         WHERE id IN (
                        SELECT applicantNo
                          FROM friend_apply
                         WHERE acceptorNo = #{id}
                           AND isAccept = 0);
    </select>

    <insert id="insertMemberAllParameters" parameterType="Member">
        INSERT INTO member VALUES (#{id}, #{email}, #{pw}, #{nick}, #{realName}, #{loginType}, #{pictureUrl}, #{thumbnailImageUrl}, #{locale}, #{gender}, #{age}, #{birth} #{subId})
    </insert>

    <insert id="insertMemberExcludePwParameter" parameterType="Member">
        INSERT INTO member(id, email, nick, real_name, login_type, picture_url, thumbnail_image_url, locale, gender, age, birth, sub_id)
        VALUES (#{id}, #{email}, #{nick}, #{realName}, #{loginType}, #{pictureUrl}, #{thumbnailImageUrl}, #{locale}, #{gender}, #{age}, #{birth}, #{subId})
    </insert>

    <insert id="applyFriend" parameterType="Friend">
        INSERT INTO friend_apply(applicantNo, acceptorNo) VALUES (#{applicantNo}, #{acceptorNo})
    </insert>

    <update id="acceptFriendFirst" parameterType="Friend" >
        UPDATE friend_apply SET isAccept = 1 WHERE applicantNo = #{applicantNo} AND acceptorNo = #{acceptorNo}
    </update>

    <insert id="acceptFriendSecond" parameterType="Friend">
        INSERT INTO friend(applicantNo, acceptorNo) VALUES (#{applicantNo}, #{acceptorNo})
    </insert>

    <insert id="joinMember" parameterType="Member">
        INSERT INTO member(id, email, pw, nick, real_name, login_type, locale, gender, age, birth)
        VALUES (#{id}, #{email}, #{pw}, #{nick}, #{realName}, #{loginType}, #{locale}, #{gender}, #{age}, #{birth})
    </insert>

    <update id="updateMember" parameterType="Member">
        UPDATE member SET picture_url = #{pictureUrl} , thumbnail_image_url = #{thumbnailImageUrl} WHERE id = #{id}
    </update>

</mapper>